Terraform 

---------------------------------
Lecture 5: Terraform Installation
---------------------------------

https://www.terraform.io/ # download terraform

$ cd ~ # /Users/umer
$ mkdir terraform
$ cd terraform 
$ mv ~/Downloads/Terraform/terraform_0.12.26_darwin_amd64.zip .
$ unzip terraform_0.12.26_darwin_amd64.zip

$ export PATH=/Users/umer/terraform:$PATH
$ terraform

-----------------------------------------------
Lecture 7: Terraform Installation Using Vagrant
-----------------------------------------------

https://www.virtualbox.org/ # download VirtualBox
https://www.vagrantup.com/ # download vagrantup

$ git clone https://github.com/wardviaene/devops-box
$ cd devops-box/scripts
$ vagrant up # Vagrant Ubuntu images is installed and terraform is installed on it
$ vagrant ssh # vagrant@ubuntu-bionic:~$
$ terraform

-------------------------------------------------------------------------
Lecture 8: Understanding terraform HCL (HashiCorp Configuration Language)
-------------------------------------------------------------------------

$ mkdir terraform-test
$ cd terraform-test/
$ touch main.tf 

---
variable "myvar" {                  # create variable 'myvar'
    type = "string"                 # properties
    default = "hello terraform"
}
---

$ terraform version
$ terraform consol
> var.myvar # hello terraform
> "${var.myvar}"

---
variable "mymap" {
    type = map(string)          
    mykey = "my value"
}
---

$ terraform consol
> var.myvar 
> var.mymap["mykey"]
> my value
>"${var.mymap["mykey"]}"

variable "mylist" {
    type = list
    default = [1, 2, 3]
}

> var.mylist
> [1, 2, 3] 
> element(var.mylist, 1)
> 2
> element(var.mylist, 0)
> 1
> exit

$ touch resource.tf 

---
provider "aws" {

}

variable "AWS_REGION" {
    type = string
}

variable "AMIS" {
    type = map(string)
    default = {
        eu-west-1 = "my ami"
    }
}

resource "aws_instance" "example" {
    ami = var.AMIS[var.AWS_REGION]
    instance_type = "t2.micro"
}
---

$ touch terraform.tfvars

---
AWS_REGION="eu-west-1"
---

$ terraform init 

-----------------------------------------------
Lecture 9: First steps in terraform - AWS Setup
-----------------------------------------------

---------------------------------------------------------------
Lecture 10: Firsts steps in terraform - Spinning up an instance 
---------------------------------------------------------------

[vagrant@ubuntu-bionic:$ terraform 
[vagrant@ubuntu-bionic:$ git clone https://github.com/wardviaene/terraform-course 
[vagrant@ubuntu-bionic:$ cd ~/terraform-course/first-steps 
[vagrant@ubuntu-bionic:$ cat instance.tf 

provider "aws" {
  access_key = "ACCESS_KEY_HERE"
  secret_key = "SECRET_KEY_HERE"
  region     = "us-west-1"
}

resource "aws_instance" "example" {
  ami           = "ami-03f24a1c3ecf7122a"
  instance_type = "t2.micro"
}

https://cloud-images.ubuntu.com/locator/ec2  (Search: us-west-1 bionic)

[vagrant@ubuntu-bionic:$ terraform init 
[vagrant@ubuntu-bionic:$ terraform apply
> Enter a value: yes
...
aws_instance.example: Creating...
aws_instance.example: Still creating... [10s elapsed]
aws_instance.example: Creation complete after 19s [id=i-0e07e1d4d3d37829d]
Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

[vagrant@ubuntu-bionic:$ terraform destroy # destroy the infrastructure
> Enter a value: yes
aws_instance.example: Destroying... [id=i-0e07e1d4d3d37829d]
aws_instance.example: Still destroying... [id=i-0e07e1d4d3d37829d, 10s elapsed]
aws_instance.example: Still destroying... [id=i-0e07e1d4d3d37829d, 20s elapsed]
aws_instance.example: Still destroying... [id=i-0e07e1d4d3d37829d, 30s elapsed]
aws_instance.example: Destruction complete after 31s
Destroy complete! Resources: 1 destroyed.

[vagrant@ubuntu-bionic:$ terraform plan 
[vagrant@ubuntu-bionic:$ terraform plan -out out.terraform 
[vagrant@ubuntu-bionic:$ terraform apply out.terraform 
[vagrant@ubuntu-bionic:$ terraform show 

----------------------------------------------
Lecture 11: First steps in terrafrom - summary
----------------------------------------------
[vagrant@ubuntu-bionic:$ terraform plan -out out.terraform  
[vagrant@ubuntu-bionic:$ terraform apply out.terraform
[vagrant@ubuntu-bionic:$ terraform destroy # destroy the infrastructure

------------------------------------
Lecture 12: Terraform Variable Types
------------------------------------
- String 
- Number 
- Bool 

variable "a-string" {
    type = string
}
variable "this-is-a-number" {
    type = number 
}
variable "true-of-false" {
    type = bool 
}

Terraform's complex Types
-------------------------
- List(type): [0,1,5,2] - A list is always ordered, it'll always return 0,1,5,2 
- Set(type): A "set" is like a list, but it doesn't keep the "order" you put it in, 
             and can only contain unique values. List [5,1,1,2] --> set [1,2,5] (terrform sorts the output)
- Map(type): {"key"="value"}
- Object({<ATTR NAME>=<TYPE>, ...})
- Tuple([<TYPE>, ...])

- Object is like a Map 
- An Tuple is like a list. E.g., [0, "string", false], a list with different types 

---------------------
Lecture 13: Variables
---------------------

$ touch vars.tf 
---------------
variable "AWS_ACCESS_KEY" {}
variable "AWS_SECRET_KEY" {}

variable "AWS_REGION" {
    default = "us-west-1"
}

variable "AMIS" {
    type = "map"
    default = {
        us-west-1 = "ami-03f24a1c3ecf7122"
    }
}

$ terraform.tfvars  # These variables aren't shows up in 'git'
------------------
AWS_ACCESS_KEY = ""
AWS_SECRET_KEY = ""

$ touch provider.tf 
-------------------
provider "aws" {
    access_key = var.AWS_ACCESS_KEY
    secret_key = var.AWS_SECRET_KEY
    region = var.AWS_REGION
}

$ touch instance.tf 
-------------------
resource "aws_instance" "example" {
    ami = var.AMIS[var.AWS_REGION]
    instance_type = "t2.micro"
}

https://cloud-images.ubuntu.com/locator/ec2 


[vagrant@ubuntu-bionic:~/terraform-course/demo-1$
[vagrant@ubuntu-bionic:~/terraform-course/demo-1$ terraform init 
[vagrant@ubuntu-bionic:~/terraform-course/demo-1$ terraform plan 

$ date
$ sudo apt-get install ntpdate ; ntpdate ntp.ubuntu.com

---------------------------------
Lecture 15: Software Provisioning
---------------------------------

You can build your own custom AMI and bundle your software with the image 
- Packer is a great tool to do this 

- Chef is integrate within terraform, you can add chef statements 
- You can run puppet agent using remote-exec 
- For ansible, yo ucan first run terraform, and output the IP addresses, then run ansible-playbook on those hosts

provisioner "file" {
    source = "app.conf" 
    destination = "/etc/myapp.conf"
}

provisioner "file" {
    source = "script.sh"
    destination = "/opt/script.sh"
    connection {
        user = "${var.instance_username}"
        password = "${var.instance_password}"
    }
}

---------------------------------------
Lecture 16: Demo: Software provisioning
---------------------------------------

$ vim terraform.tfvars
----------------------
AWS_ACCESS_KEY = ""
AWS_SECRET_KEY = ""

https://www.whatsmyip.org/ # Determine the IP address of your local machine

$ ssh-keygen -f mykey

$ vim instance.tf 
-----------------
resource "aws_key_pair" "mykey" {
    key_name   = "mykey"
    public_key = file(var.PATH_TO_PUBLIC_KEY)
}

resource "aws_instance" "example" {
    ami = var.AMIS[var.AWS_REGION]
    instance_type = "t2.micro"
    key_name = aws_key_pair.mykey.key_name

    provisioner "file" {
        source = "script.sh"
        destination = "/tmp/script.sh"
    }
  
    provisioner "remote-exec" {
        inline = [
            "chmod +x /tmp/script.sh",
            "sudo /tmp/script.sh",
        ]
    }

    connection {
        host = coalesce(self.public_ip, self.private_ip)
        type = "ssh"
        user = var.INSTANCE_USERNAME
        private_key = file(var.PATH_TO_PRIVATE_KEY)
    }
}

$ vim vars.tf
-------------
variable "AWS_ACCESS_KEY" {}

variable "AWS_SECRET_KEY" {}

variable "AWS_REGION" {
    default = "us-west-1"
}

variable "AMIS" {
    type = map(string)
    default = {
        us-wast-1 = "ami-0ccd40218fe8440fc"
    }
}

variable "PATH_TO_PRIVATE_KEY" {
    default = "mykey"
}

variable "PATH_TO_PUBLIC_KEY" {
    default = "mykey.pub"
}

variable "INSTANCE_USERNAME" {
    default = "ubuntu"
}

$ terrafrom init
$ terrafrom apply
$ terrafrom deploy
$ terraform destroy

---------------------------------------------
Lecture 17: Demo: Windows Server Provisioning
---------------------------------------------

---------------------------------
Lecture 18: Outputting attributes
---------------------------------
resource "aws_instance" "example" {
    ami = var.AMIS[var.AWS_REGION]
    instance_type = "t2.micro"
}

output "ip" {
    value = "${aws_instance.example.public_ip}"
}

The resource type: aws_instance 
The resource name: example 
The attribute name: public_ip 

resource "aws_instance" "example" {
    ami = "${lookup(var.AMIS, var.AWS_REGION)}"
    instance_type = "t2.micro"
    provisioner "local-exec" {
        command = "echo ${aws_instance.example.private_ip} >> private_ips.txt"
    }
}

vagrant@ubuntu-bionic:~/terraform-course/demo-3$ terraform init
vagrant@ubuntu-bionic:~/terraform-course/demo-3$ terraform apply

---------------------------------------
Lecture 19: Demo: Outputting attributes
---------------------------------------
$ vagrant up
$ vagrant ssh

$ terraform init
$ terraform plan
$ terrafrom apply # create a new terraform.tfstate & backup 

------------------------
Lecture 20: Remote state
------------------------

terraform {
    backend "consul" {
        address = "demo.consul.io" # hostname of consul cluster 
        path = "terraform/myproject"
    }
}

-- Store your state in S3:

terraform {
    backend "s3" {
        bucket = "mybucket"
        key = "terraform/myproject" 
        region = "us-west-1"
    }
}

-- When using an S3 remote state, it's best to configure the AWS credentials:

$ aws configure

------------------------------
Lecture 21: Demo: Remote state
------------------------------

------------------------
Lecture 22: Data Sources
------------------------

------------------------------
Lecture 23. Demo: Data Sources
------------------------------

data "aws_ip_ranges" "european_ec2" {
    regions = ["eu-west-1", "eu-central-1"]
    services = ["ec2"]
}

resource "aws_security_group" "from_europe" {
    name = "from_europe"

    ingress {
        from_por = "443"
        to_port = "443"
        protocol = "tcp" 
        cidr_blocks = ["${data.aws_ip_ranges.european_ec2.cidr_blocks}"]
    }
    tags {
        CreateDate = "${data.aws_ip_ranges.european_ec2.create_date}"
        SyncToken = "${data.aws_ip_ranges.european_ec2.sync_token}"
    }
}

---------------------
Lecture 24. Templates
---------------------

---------------------------
Lecture 25. Other Providers
---------------------------
- Google Cloud 
- Azure 
- Heroku 
- DigitalOcean

Datadog - Cloud Monitoring as a Service 
GitHub - Version control 
Mailgun - emailing (SMTP) 
DNSSimple / DNSMadeEasy / UltraDNS - DNS hosting

https://www.terraform.io/docs/providers/index.html

-------------------
Lecture 26. Modules
-------------------

------------------------------------
Lecture 27. Demo: An external Module
------------------------------------
$ terraform get 
...
$ terraform apply 
$ terraform destroy

---------------------------------------
Lecture 28. Terraform Commands Overview
---------------------------------------


------------------------------------
Lecture 29. Demo: Terraform Commands
------------------------------------


--------------------------------
Lecture 30. Introduction to VPCs
--------------------------------

------------------------------------------
Lecture 31. Introduction to VPCs - Part II
------------------------------------------

------------------------------------------------
Lecture 32. Introduction to terraform - Part III
------------------------------------------------

-------------------------------
Lecture 33. Demo: VPCs and NAT
-------------------------------



$ ssh-keygen -f mykey

$ terraform init
$ terrform deploy
$ terraform apply
$ terraform destroy

----------------------------------------------
Lecture 34. Launching EC2 instances in the VPC
----------------------------------------------

------------------------------------------------
Lecture 34. Demo: Launching instances in the VPC
------------------------------------------------

$ provider.tf
-------------
provider "aws" {
        access_key = var.AWS_ACCESS_KEY
        secret_key = var.AWS_SECRET_KEY
        region = var.AWS_REGION
}

$ vim terraform.tfvars
----------------------
AWS_ACCESS_KEY = "..."
AWS_SECRET_KEY = "..."

$ vim vars.tf
----------------------------
variable "AWS_ACCESS_KEY" {}
  
variable "AWS_SECRET_KEY" {}

variable "AWS_REGION" {
        default = "us-east-2"
}

variable "PATH_TO_PRIVATE_KEY" {
        default = "mykey"
}

variable "PATH_TO_PUBLIC_KEY" {
        default = "mykey.pub"
}
--------------------------------

$ ssh-keygen -f mykey

$ terraform init
$ terrform deploy
$ terraform apply
$ terraform destroy

https://cloud-images.ubuntu.com/locator/ec2/